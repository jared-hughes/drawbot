#!/usr/bin/env python3

import argparse
import subprocess
import re
import os
from os.path import expanduser

parser = argparse.ArgumentParser()
parser.add_argument('input', help='input file (.svg)')
parser.add_argument('output', nargs='?', help='Output File (.gcode)')
parser.add_argument('-d', '--dim', help='Include draw boundaries',
    action='store_true')
# default True
parser.add_argument('--flip', help='Flip the output y-axis', action='store_false')
args = parser.parse_args()

def change_ending(filename, repl):
    if "." not in filename:
        filename += repl
    return re.sub("\.[^.]*$", repl, filename)

JUICY = expanduser("~/drawbot/drawbot/juicy-gcode-0.1.0.5")
source_file = args.input;

def cleanify_svg(filename):
    with open(filename) as f:
        svg = f.read()
        # remove all objects with opacity 0.99*
    clean_svg = re.sub(r"<[^>]*opacity:0.99[^>]*>\s*", "", svg, flags=re.MULTILINE | re.DOTALL)
    return clean_svg
    
try:
    clean_svg = cleanify_svg(source_file)
except:
    source_file = change_ending(source_file, ".svg")
    # if this doesn't work, cry
    clean_svg = cleanify_svg(source_file)

temp_filename = change_ending(source_file, ".gcode.tmp")
try:
    with open(temp_filename, "w+") as f:
        f.write(clean_svg)
    p = subprocess.run([f"{JUICY}/juicy-gcode", temp_filename,
        "-f", f"{JUICY}/config", "-d", "1"], stdout=subprocess.PIPE)
finally:
    os.remove(temp_filename)

output = args.output
if output is None:
    output = change_ending(source_file, ".gcode")
    print(output);
gcode = p.stdout.decode("UTF-8")

with open(output, "w+") as outfile:
    for line in gcode.split("\n"):
        if "NaN" in line:
            continue
        # flip Y
        if line == "":
            continue
        if args.flip:
            parts = line.split(" ")
            if parts[0] == "G02":
                line = "G03"
            elif parts[0] == "G03":
                line = "G02"
            else:
                line = parts[0]
            for part in parts[1:]:
                add = ""
                if part[0] in "YJ":
                    add = part[0] + str(-float(part[1:]))
                else:
                    add = part
                line += " " + add
        outfile.write(line + "\n")

